import React, { useState, useRef, useEffect } from "react"
import { graphql } from "gatsby"
import "./index.css"

const IndexPage = ({ data }) => {
    // player setup
    const [isPlaying, setIsPlaying] = useState(false)
    const audioRef = useRef(null)
    const imgRef = useRef(null)
    const playlist = [];
    const imglist = [];
    const [currentTime, setCurrentTime] = useState(0)
    const [currentTrack, setCurrentTrack] = useState(0)
    const [volume, setVolume] = useState(1)
    const { allFile, allImageSharp } = data
    const audioFiles = data.allFile.nodes.map(node => node.publicURL)
    const currentlyPlaying = data.allFile.nodes.map(node => node.name)
    const imgFiles = data.allImageSharp.nodes.map(node => node.fixed.src)
    
    for (let i = 0; i < audioFiles.length; i++) {
	playlist.push(audioFiles[i]);
    }

    for (let i = 0; i < imgFiles.length; i++) {
	imglist.push(imgFiles[i]);
    }
    
    const handlePlayPause = () => {
        const audio = audioRef.current
        if (audio) {
            if (isPlaying) {
                audio.pause()
            } else {
                audio.play()
            }
            setIsPlaying(!isPlaying)
        }
    }

    const handlePlay = () => {
	const audio = audioRef.current;
	if (audio) {
	    audio.play()
	}
	setIsPlaying()
    }
    
    const handlePrev = () => {
        // handle previous song logic
	const audio = audioRef.current
	setCurrentTrack(
	    (currentTrack - 1 + audioFiles.length) % audioFiles.length
	)
	if (imgRef.current) {
	    // Do something with the img element, e.g. change its src attribute
	    imgRef.current.src = imglist[currentlyPlaying]
	}
	handlePlay()
    }
    
    const handleNext = () => {
        // handle next song logic
	const audio = audioRef.current
	setCurrentTrack((currentTrack + 1) % audioFiles.length)
	if (imgRef.current) {
	    // Do something with the img element, e.g. change its src attribute
	    imgRef.current.src = imglist[currentlyPlaying]
	}
	handlePlay()
    }

    const handleSelect = (index) => {
	// handle selecting song logic
	setCurrentTrack(index)
	handlePlay();
	if (imgRef.current) {
	    // Do something with the img element, e.g. change its src attribute
	    imgRef.current.src = imglist[currentlyPlaying]
	}
    }

    const handleRepeat = (index, audioRef, setIsPlaying) => {
	const audio = audioRef.current;
	// Set the audio source to the specified song index
	audio.src = playlist[index].src;
	// Play the audio
	audio.play();
	// Set the isPlaying state to true
	setIsPlaying(true);
	// Listen for the audio ended event
	audio.addEventListener('ended', () => {
	    // When the audio ends, replay it
	    audio.currentTime = 0;
	    audio.play();
	});
    }

    const handleShuffle = (playlist, setCurrentTrack) => {
	// Create a copy of the original songs array
	const shuffledTracks = [...playlist];
	
	// Shuffle the songs using the Fisher-Yates shuffle algorithm
	for (let i = shuffledTracks.length - 1; i > 0; i--) {
	    const j = Math.floor(Math.random() * (i + 1));
	    [shuffledTracks[i], shuffledTracks[j]] = [shuffledTracks[j], shuffledTracks[i]];
	}
	
	// Set the current song index to the first song in the shuffled list
	setCurrentTrack(0);
	
	// Return the shuffled songs array
	return shuffledTracks;
    }

    useEffect(() => {
	const audio = audioRef.current;
	
	const handlePlaying = () => {
	    setIsPlaying(isPlaying)
	}

	const handlePause = () => {
	    setIsPlaying(!isPlaying)
	    handleNext()
	}

	if (audio) {
	    if (isPlaying) {
		audio.addEventListener("playing", handlePlaying);
		audio.addEventListener("pause", handlePause);
	    }
	}
	
	return () => {
	    if (audio) {
		audio.removeEventListener("playing", handlePlaying);
		audio.removeEventListener("pause", handlePause);
	    }
	};
    }, [!isPlaying]);
    
    const formatTime = (time) => {
	const minutes = Math.floor(time / 60)
	const seconds = Math.floor(time % 60)
	return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`
    }
    
    const handleTimeUpdate = () => {
        const audio = audioRef.current
        if (audio) {
            setCurrentTime(audio.currentTime)
        }
    }

    const handleSeek = (event) => {
        const audio = audioRef.current
        if (audio) {
            audio.currentTime = event.target.value
            setCurrentTime(audio.currentTime)
        }
    }

    const handleVolumeChange = (event) => {
        const audio = audioRef.current
        if (audio) {
            setVolume(event.target.value)
            audio.volume = event.target.value
        }
    }
    
    return (
	<div className="player-container">
	    <div className="header">
		<div className="logo-container">
		    <a href="">üêç</a>
		    <nav>
			<a href="/">Home</a>
			<a href="/about">About</a>
			<a href="/contact">Contact</a>
		    </nav>
		</div>
	    </div>
	    <div class="row">
		<div class="col-3 col-s-3 menu">
		    <ul>
			<li>The Flight</li>
			<li>The City</li>
			<li>The Island</li>
			<li>The Food</li>
		    </ul>
		</div>
		<div className="col-6 col-s-9">
		    <div className="cover-art">
			<img
			    ref={imgRef}
			    src={imglist[currentTrack]}
			    alt="üé∂"
			/>
		    </div>
		</div>
		<div className="col-3 col-s-12">
		    <div className="content">
			<ul>
			    <h1>
				{allFile.nodes.map((node, index) => (
				    <li
					key={node.name}
					className={currentTrack === index ? 'playing' : ''}>
					<audio
					    ref={audioRef}
					    src={playlist[currentTrack]}
					    onTimeUpdate={handleTimeUpdate}
					    volume={volume}
					/>
					<button
					    type="button"
					    onClick={() => handleSelect(index)}>
					    {node.name}
					</button>				
				    </li>	
				))}
			    </h1>
			</ul>
		    </div>
		</div>
		<div className="footer">
		    <div className="controls-container">
			<button className="prev-button" onClick={handlePrev}>
			    ‚èÆ
			</button>
			<button className="play-button" onClick={handlePlayPause}>
			    {isPlaying ? "‚è∏" : "‚ñ∂Ô∏è"}
			</button>
			<button className="next-button" onClick={handleNext}>
			    ‚è≠
			</button>
			<div className="seek-container">
			    <input
				className="seek-bar"
				type="range"
				min="0"
				max={audioRef.current ? audioRef.current.duration : "100"}
				value={currentTime}
				onChange={handleSeek}
			    />
			    <div className="time-container">
				<span className="time">{formatTime(currentTime)}</span>
				<span className="time">{audioRef.current ? formatTime(audioRef.current.duration) : "0"}</span>
			    </div>
			</div>
			<div className="volume-container">
			    <input
				className="volume-bar"
				type="range"
				min="0"
				max="1"
				step="0.01"
				value={volume}
				onChange={handleVolumeChange}
			    />
			    <div className="volume-icon-container">
				{volume == 0 ? "üîá" : volume < 0.50 ? "üîâ" : "üîä"}
			    </div>
			</div>
			<div className="now-playing">
			    <a href="">{currentlyPlaying[currentTrack]}</a>
			</div>
		    </div>
		</div>
	    </div>
	</div>
    )
}

export default IndexPage

export const Head = () => (
    <>
	<title>üêç</title>
	<meta name="description" content="üêç" />
	<meta charSet="UTF-8"/>
	<meta httpEquiv="X-UA-Compatible" content="IE=edge,chrome=1"/>
	<meta name="viewport" content="width=device-width, initial-scale=1"/>
	<meta name="theme-color" content="#ffffff"/>
    </>
)

export const query = graphql`
{
  allFile(filter: { extension: { eq: "mp3" } }) {
    nodes {
      name
      extension
      dir
      modifiedTime
      publicURL
    }
  }
  allImageSharp{
    nodes{ fixed{ src } }
  }
}
`;
